{"version":3,"sources":["screen/district/district/api/index.js","screen/district/district/Edit.js"],"names":["BASE_URL","create","user","token","a","fetch","method","body","JSON","stringify","headers","accept","Authorization","catch","err","console","log","response","data","json","reads","read","id","edit","remove","Edit","useParams","React","useState","code","names","phone","address","email","status","password","password2","loading","loadingBtn","redirectToPage","error","reload","values","setValues","handleChange","name","event","target","value","handleReload","preventDefault","handleUpdate","Swal","fire","message","Toast","mixin","toast","timerProgressBar","position","showConfirmButton","timer","animation","type","title","useEffect","ignore","v","bootstrap","to","redirectUser","Header","Title","as","Body","variant","onClick","isError","isLoading","md","Group","controlId","Label","Control","placeholder","onChange"],"mappings":"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","file":"static/js/93.1c61375b.chunk.js","sourcesContent":["//let  BASE_URL = \"\",\r\n\r\nconst BASE_URL = \"https://iemis.herokuapp.com/api/v1\"\r\n\r\nexport const create = async (user, token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/district`,{\r\n            method:'POST',\r\n            body:JSON.stringify(user),\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\n\r\nexport const reads = async (token)=>{\r\n    try{\r\n        //district\r\n        const response = await fetch(`${BASE_URL}/district`,{\r\n            method:'GET',\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\n\r\nexport const read = async (id, token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/district/${id}`,{\r\n            method:'GET',\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\n\r\nexport const edit = async (id, user, token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/district/${id}`,{\r\n            method:'PUT',\r\n            body:JSON.stringify(user),\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\n\r\nexport const remove = async (id, token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/district/${id}`,{\r\n            method:'DELETE',\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}","import React from 'react'\r\nimport {Row, Col, Card, Form, Button} from 'react-bootstrap';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport Swal from 'sweetalert2'\r\nimport { useParams, Redirect } from \"react-router-dom\";\r\nimport { edit, read } from './api';\r\n\r\n\r\nexport default function Edit() {\r\n    let { id } = useParams();\r\n\r\n    const [values, setValues] = React.useState({\r\n        code:\"\",\r\n        names:\"\",\r\n        phone:\"\",\r\n        address:\"\",\r\n        email:\"\",\r\n        status:true,\r\n        password:\"\",\r\n        password2:\"\",\r\n        loading:false,\r\n        loadingBtn:false,\r\n        redirectToPage:false,\r\n        error:false,\r\n        reload:false,\r\n        token:'00033'\r\n        \r\n    })\r\n\r\n    const {code, names, phone, email, password, password2, address, status, error, loading, loadingBtn, reload, redirectToPage, token} = values\r\n\r\n    const handleChange = name=>event=>{\r\n        setValues({...values, [name]:event.target.value})\r\n    }\r\n\r\n    const isLoading= () => {\r\n        if(loading){\r\n            return (\r\n                <Aux>\r\n                    <Row>\r\n                        <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Wait !!!.</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <h1>Requesting for District  data</h1>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Aux>\r\n            )\r\n        }\r\n    };\r\n    const isError = () => {\r\n        if(error){\r\n            return (\r\n                <Aux>\r\n                    <Row>\r\n                        <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Error in reading this user .</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <h1>failed to read district data, Try again <Button variant=\"primary\" onClick={handleReload}>Reload</Button> </h1>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Aux>\r\n            )\r\n        }\r\n    };\r\n\r\n    const handleReload = event =>{\r\n        event.preventDefault();\r\n        setValues({...values, loading:false, error:false, reload:!reload})\r\n    }\r\n\r\n    const submit = event =>{\r\n        event.preventDefault();\r\n        setValues({...values, loadingBtn:true})\r\n        if(code===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'District code is required', 'error');\r\n        }\r\n        if(names===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'District name is required', 'error');\r\n        }\r\n        if(phone===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'District Phone number is required', 'error');\r\n        }\r\n        if(address===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'District address is required', 'error');\r\n        }\r\n        if(email===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'District email is required', 'error');\r\n        }\r\n        if(password===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Password can not be an empty value', 'error');\r\n        }\r\n\r\n        if(password !== password2) {\r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Password must match each other', 'error');\r\n        }\r\n\r\n        handleUpdate();\r\n    }\r\n\r\n    const handleUpdate =async ()=>{\r\n        const user = {code, names, phone, email, password, password2, address, status}\r\n        const data = await edit(id, user, token);\r\n        //console.log(data)\r\n        if(!data){\r\n            Swal.fire('Oops...', 'internet server error, Please, check your network connection', 'error')\r\n            return setValues({...values, loadingBtn:false})\r\n        }\r\n        if(data.error){\r\n            Swal.fire('Oops...', data.error, 'error')\r\n            return setValues({...values, loadingBtn:false})\r\n        }\r\n        if(data.message){\r\n            Swal.fire('Saved...', data.message, 'success')\r\n            setValues({...values, loadingBtn:false, redirectToPage:true});\r\n\r\n            let Toast = Swal.mixin({\r\n            toast: true,\r\n            timerProgressBar: true,\r\n            position: 'top-end',\r\n            showConfirmButton: false,\r\n            timer: 3000\r\n           });\r\n            return Toast.fire({\r\n                animation: true,\r\n                type: 'success',\r\n                title: 'Request is successful'\r\n            })\r\n        }\r\n    }\r\n\r\n    const redirectUser = () => {\r\n        if (redirectToPage){\r\n            return <Redirect to=\"/admin/districts/read\" />\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        let ignore = false;\r\n        const bootstrap = async ()=>{\r\n            setValues(v => ({...v, loading:true}))\r\n            const data = await read(id);\r\n            //console.log({data, id})\r\n            if (!ignore){\r\n                if(!data){\r\n                    Swal.fire('Oops...', 'internet server error, Please, check your network connection', 'error');\r\n                    setValues(v => ({...v, loading:false, error:true}))  \r\n                    return  \r\n                }\r\n                if(data.error){\r\n                    Swal.fire('Oops...', data.error, 'error')\r\n                    setValues(v => ({...v, loading:false, error:true})) \r\n                    return \r\n                }\r\n        \r\n                if(data.message){\r\n                    const {code, names, email, phone,address } = data.data;\r\n                    setValues(v => ({...v, loading:false, error:false, code, phone,email,names, address }))\r\n                    return Swal.fire('Great', data.message, 'success');\r\n                } \r\n            }\r\n        }\r\n        bootstrap()\r\n        return () => { ignore = true };\r\n    },[reload, id])\r\n\r\n    return (\r\n        <Aux>\r\n        {redirectUser()}\r\n        {isError()}\r\n        {\r\n            loading ? isLoading() :\r\n            <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h3\">Update the District</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col md={6}>\r\n                                        <Form>\r\n                                            <Form.Group controlId=\"formBasicEmail\">\r\n                                                <Form.Label>District Code</Form.Label>\r\n                                                <Form.Control type=\"text\" placeholder=\"district code\" onChange={handleChange(\"code\")} value={code} />\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group controlId=\"formBasicEmail\">\r\n                                                <Form.Label>District Name</Form.Label>\r\n                                                <Form.Control type=\"text\" placeholder=\"district name\" onChange={handleChange(\"names\")} value={names} />\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"formBasicEmail\">\r\n                                                <Form.Label>Phone </Form.Label>\r\n                                                <Form.Control type=\"text\" placeholder=\"district phone\" onChange={handleChange(\"phone\")} value={phone} />\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Password</Form.Label>\r\n                                                <Form.Control type=\"password\" placeholder=\"Password\" onChange={handleChange(\"password\")} value={password} />\r\n                                            </Form.Group>\r\n                                            {\r\n                                                loadingBtn ? \"loading ...\" : <Button variant=\"primary\" onClick={submit}  >Update..</Button>\r\n                                            }\r\n                                        </Form>\r\n                                    </Col>\r\n                                    <Col md={6}>\r\n                                    <Form.Group controlId=\"formBasicEmail\">\r\n                                                <Form.Label>Address </Form.Label>\r\n                                                <Form.Control type=\"text\" placeholder=\"building/house name, city\" onChange={handleChange(\"address\")} value={address} />\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"formBasicEmail\">\r\n                                                <Form.Label>Officer-in- charge</Form.Label>\r\n                                                <Form.Control type=\"text\" placeholder=\"Education District ID\" />\r\n                                            </Form.Group>\r\n                                        <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                                            <Form.Label>email </Form.Label>\r\n                                            <Form.Control type=\"email\" placeholder=\"email\" onChange={handleChange(\"email\")} value={email}/>\r\n                                        </Form.Group>\r\n                                        <Form.Group controlId=\"formBasicPassword\">\r\n                                            <Form.Label>Password Confirmation</Form.Label>\r\n                                            <Form.Control type=\"password\" placeholder=\"Password Confirmation\" onChange={handleChange(\"password2\")} value={password2} />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n            </Row>\r\n        } \r\n        </Aux>\r\n        \r\n    )\r\n}\r\n"],"sourceRoot":""}