{"version":3,"sources":["screen/admin/admin/api/index.js","screen/admin/admin/Edit.js"],"names":["BASE_URL","create","user","token","a","fetch","method","body","JSON","stringify","headers","accept","Authorization","catch","err","console","log","response","data","json","reads","read","edit","id","remove","Edit","useParams","React","useState","firstName","lastName","middleName","phone","email","password","password2","level","loading","redirectToPage","error","reload","loadingBtn","values","setValues","handleChange","name","event","target","value","handleUpdate","Swal","fire","message","mixin","toast","timerProgressBar","position","showConfirmButton","timer","animation","type","title","handleReload","preventDefault","useEffect","ignore","v","showClass","bootstrap","to","redirectUser","Header","Title","as","Body","variant","onClick","isError","isLoading","md","Group","controlId","Label","Control","placeholder","onChange"],"mappings":"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","file":"static/js/77.d3ebd861.chunk.js","sourcesContent":["//let  BASE_URL = \"\",\r\n\r\nconst BASE_URL = \"https://iemis.herokuapp.com/api/v1\"\r\n\r\nexport const create = async (user, token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/admin`,{\r\n            method:'POST',\r\n            body:JSON.stringify(user),\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\nexport const reads = async (token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/admin`,{\r\n            method:'GET',\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\n\r\nexport const read = async (user, token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/admin/${user}`,{\r\n            method:'GET',\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\n\r\nexport const edit = async (id, user, token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/admin/${id}`,{\r\n            method:'PUT',\r\n            body:JSON.stringify(user),\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\n\r\nexport const remove = async (user, token)=>{\r\n    try{\r\n        const response = await fetch(`${BASE_URL}/admin/${user}`,{\r\n            method:'DELETE',\r\n            headers:{\r\n                'Content-Type':'application/json',\r\n                accept:'application/json',\r\n                Authorization: `Bearer ${token}`\r\n            },\r\n        }).catch(err => {\r\n            console.log(err)\r\n        });\r\n        const data = response.json();\r\n        return data;\r\n    }catch(e){console.log(e)}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {Row, Col, Card, Form, Button} from 'react-bootstrap';\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport Swal from 'sweetalert2'\r\nimport {read, edit } from './api';\r\nimport { useParams, Redirect } from \"react-router-dom\";\r\n\r\nexport default function Edit() {\r\n\r\n    let { id } = useParams();\r\n\r\n    const [values, setValues] = React.useState({\r\n        firstName:\"\",\r\n        lastName:\"\",\r\n        middleName:\"\",\r\n        phone:\"\",\r\n        email:\"\",\r\n        password:\"\",\r\n        password2:\"\",\r\n        level:\"\",\r\n        loading:false,\r\n        redirectToPage:false,\r\n        error:false,\r\n        reload:false,\r\n        loadingBtn:false,\r\n        token:\"\",\r\n    })\r\n\r\n    const {firstName, lastName, middleName, phone, email, password, password2, level, error, loading, reload, redirectToPage, loadingBtn, token} = values\r\n\r\n    const handleChange = name=>event=>{\r\n        setValues({...values, [name]:event.target.value})\r\n        //setSecret(s => ({ ...s, value: target.value }));\r\n    }\r\n\r\n    const submit = event =>{\r\n        event.preventDefault();\r\n        setValues({...values, loadingBtn:true})\r\n        if(firstName===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Admin first Name is required', 'error');\r\n        }\r\n        if(middleName===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Admin Middle Name is required', 'error');\r\n        }\r\n        if(lastName===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Admin Last Name is required', 'error');\r\n        }\r\n        if(email===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Email is required', 'error');\r\n        }\r\n        if(phone===\"\"){ \r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Phone Number is required', 'error');\r\n        }\r\n        if(password ===\"\") {\r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Password is required', 'error');\r\n        }\r\n        if(password !== password2) {\r\n            setValues({...values, loadingBtn:false})\r\n            return Swal.fire('Oops...', 'Password must match each other', 'error');\r\n        }\r\n        handleUpdate();\r\n    }\r\n\r\n    const handleUpdate =async ()=>{\r\n        const user = {firstName, lastName, middleName, phone, email, password, password2, level}\r\n        const data = await edit(id,user,token);\r\n        console.log(data)\r\n        if(!data){\r\n            Swal.fire('Oops...', 'internet server error, Please, check your network connection', 'error')\r\n            return setValues({...values, loadingBtn:false})\r\n        }\r\n\r\n        if(data.error){\r\n            Swal.fire('Oops...', data.error, 'error')\r\n            return setValues({...values, loadingBtn:false})\r\n        }\r\n\r\n        if(data.message){\r\n            \r\n            let Toast = Swal.mixin({\r\n                toast: true,\r\n                timerProgressBar: true,\r\n                position: 'top-end',\r\n                showConfirmButton: false,\r\n                timer: 3000\r\n            });\r\n    \r\n            Toast.fire({\r\n                animation: true,\r\n                type: 'success',\r\n                title: 'Request is successful'\r\n            })\r\n           setValues({...values, loadingBtn:false, redirectToPage:true})\r\n           return Swal.fire('saved...', data.message, 'success')\r\n        }\r\n    }\r\n\r\n    const redirectUser = () => {\r\n        if (redirectToPage){\r\n            return <Redirect to=\"/admin/users/read\" />\r\n        }\r\n    };\r\n\r\n    const isLoading= () => {\r\n        if(loading){\r\n            return (\r\n                <Aux>\r\n                    <Row>\r\n                        <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Wait !!!.</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <h1>Requesting for Admin  data</h1>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Aux>\r\n            )\r\n        }\r\n    };\r\n\r\n    const isError = () => {\r\n        if(error){\r\n            return (\r\n                <Aux>\r\n                    <Row>\r\n                        <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Error in reading this user .</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <h1>Admin data failed to read, Try again <Button variant=\"primary\" onClick={handleReload}>Reload</Button> </h1>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Aux>\r\n            )\r\n        }\r\n    };\r\n\r\n    const handleReload = event =>{\r\n        event.preventDefault();\r\n        setValues({...values, loading:false, error:false, reload:!reload})\r\n    }\r\n\r\n    \r\n\r\n    React.useEffect(() => {\r\n        let ignore = false;\r\n        const bootstrap = async ()=>{\r\n            setValues(v => ({...v, loading:true}))\r\n            const data = await read(id);\r\n            if (!ignore){\r\n                if(!data){\r\n                    Swal.fire('Oops...', 'internet server error, Please, check your network connection', 'error');\r\n                    setValues(v => ({...v, loading:false, error:true}))  \r\n                    //setSecret(s => ({...s, countSecrets: s.countSecrets + 1}));\r\n                    return  \r\n                }\r\n                if(data.error){\r\n                    Swal.fire('Oops...', data.error, 'error')\r\n                    //setValues({...values, loading:false, error:true})\r\n                    setValues(v => ({...v, loading:false, error:true})) \r\n                    return \r\n                }\r\n        \r\n                if(data.message){\r\n                    let Toast = Swal.mixin({\r\n                        toast: true,\r\n                        timerProgressBar: true,\r\n                        position: 'top-end',\r\n                        showConfirmButton: false,\r\n                        timer: 3000\r\n                    });\r\n                    Toast.fire({\r\n                        showClass: true,\r\n                        type: 'success',\r\n                        title: data.message\r\n                    })\r\n                    setValues(v => ({...v, loading:false, error:false, firstName:data.data.firstName, lastName:data.data.lastName, phone:data.data.phone, middleName:data.data.middleName, email:data.data.email, level:data.data.level}))\r\n                    return Swal.fire('Great', data.message, 'success');\r\n                } \r\n            }\r\n         \r\n        }\r\n        bootstrap()\r\n        return () => { ignore = true };\r\n    },[reload, id])\r\n\r\n    return (\r\n        <Aux>\r\n            {redirectUser()}\r\n            {isError()}\r\n            {loading ? isLoading() :\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h3\">Update the admin data</Card.Title>\r\n                            </Card.Header>\r\n                                <Card.Body>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <Form>\r\n                                                <Form.Group controlId=\"formBasicEmail\">\r\n                                                    <Form.Label>First name</Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"First name\" onChange={handleChange(\"firstName\")} value={firstName} />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group controlId=\"formBasicEmail\">\r\n                                                    <Form.Label>Middle Name</Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"Middle name\" onChange={handleChange(\"middleName\")} value={middleName} />\r\n                                                </Form.Group>\r\n                                                <Form.Group controlId=\"formBasicEmail\">\r\n                                                    <Form.Label>Phone </Form.Label>\r\n                                                    <Form.Control type=\"text\" placeholder=\"phone\" onChange={handleChange(\"phone\")} value={phone} />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group controlId=\"formBasicPassword\">\r\n                                                    <Form.Label>Password</Form.Label>\r\n                                                    <Form.Control type=\"password\" placeholder=\"Password\" onChange={handleChange(\"password\")} value={password} />\r\n                                                </Form.Group>\r\n\r\n                                                {\r\n                                                    loadingBtn ? \"loading ...\" : <Button variant=\"primary\" onClick={submit}  >Update Admin Data ..</Button>\r\n                                                }\r\n                                            </Form>\r\n                                        </Col>\r\n                                        <Col md={6}>\r\n                                            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                                                <Form.Label>Last name</Form.Label>\r\n                                                <Form.Control type=\"text\" placeholder=\"Last name\" onChange={handleChange(\"lastName\")} value={lastName} />\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                                                <Form.Label>email </Form.Label>\r\n                                                <Form.Control type=\"email\" placeholder=\"email\" onChange={handleChange(\"email\")} value={email}/>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                                                <Form.Label>Admin Role </Form.Label>\r\n                                                <Form.Control as=\"select\" onChange={handleChange(\"level\")} value={level}>\r\n                                                    <option>Select Role</option>\r\n                                                    <option value=\"1\">Admin</option>\r\n                                                    <option value=\"2\">Moderator</option>\r\n                                                </Form.Control>\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"formBasicPassword\">\r\n                                                <Form.Label>Password Confirmation</Form.Label>\r\n                                                <Form.Control type=\"password\" placeholder=\"Password Confirmation\" onChange={handleChange(\"password2\")} value={password2} />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n        </Aux>\r\n    )\r\n}\r\n"],"sourceRoot":""}